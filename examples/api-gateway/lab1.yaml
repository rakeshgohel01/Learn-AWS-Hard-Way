AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a REST API to retrieve product details using Lambda with query string transformation and logging.

Resources:
  ApiGatewayLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: APIGatewayLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "arn:aws:logs:*:*:*"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLogRole.Arn

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ProductDetailsLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function
  ProductDetailsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProductDetailsFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log("Received Event:", JSON.stringify(event, null, 2));
            const products = {
              "id123": { id: "id123", name: "Laptop", price: "$1000" },
              "id456": { id: "id456", name: "Smartphone", price: "$500" },
              "id789": { id: "id789", name: "Tablet", price: "$300" }
            };
            const productId = event.queryStringParameters?.id;
            const product = products[productId];
            return {
              statusCode: product ? 200 : 404,
              body: JSON.stringify(product || { error: "Product not found" })
            };
          };

  # API Gateway REST API
  ProductDetailsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ProductDetailsApi

  # API Gateway Resource
  ProductResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ProductDetailsApi.RootResourceId
      PathPart: product
      RestApiId: !Ref ProductDetailsApi

  # API Gateway Method
  GetProductMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ProductResource
      RestApiId: !Ref ProductDetailsApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref AWS::Region
            LambdaArn: !GetAtt ProductDetailsLambda.Arn
        RequestTemplates:
          application/json: |
            {
              "queryStringParameters": {
                "id": "$util.escapeJavaScript($input.params('id').toLowerCase())"
              }
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: "$input.body"
      MethodResponses:
        - StatusCode: 200


  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ProductDetailsApi
      StageName: dev
    DependsOn: GetProductMethod

  # Permissions for API Gateway to Invoke Lambda
  LambdaApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductDetailsLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${Region}:${AccountId}:${ApiId}/*
        - Region: !Ref AWS::Region
          AccountId: !Ref AWS::AccountId
          ApiId: !Ref ProductDetailsApi

Outputs:
  ApiEndpoint:
    Description: URL of the REST API
    Value: !Sub "https://${ProductDetailsApi}.execute-api.${AWS::Region}.amazonaws.com/dev/product?id={id}"